/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.paulhoang;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** The first version of a User schema */
@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1471224121501763467L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"com.paulhoang\",\"doc\":\"The first version of a User schema\",\"fields\":[{\"name\":\"firstName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The users first name\"},{\"name\":\"lastName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The users last name\"},{\"name\":\"username\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The users username\"},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The users email\"},{\"name\":\"createdDate\",\"type\":\"long\",\"doc\":\"When the user was created\",\"logicaltype\":\"timestamp-milli\"},{\"name\":\"lastLogInDate\",\"type\":\"long\",\"doc\":\"The users first name\",\"logicaltype\":\"timestamp-milli\"},{\"name\":\"receiveEmails\",\"type\":\"boolean\",\"doc\":\"If the user should receive emails\",\"default\":true}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<User> ENCODER =
      new BinaryMessageEncoder<User>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<User> DECODER =
      new BinaryMessageDecoder<User>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<User> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<User> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<User>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this User to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a User from a ByteBuffer. */
  public static User fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The users first name */
   private java.lang.String firstName;
  /** The users last name */
   private java.lang.String lastName;
  /** The users username */
   private java.lang.String username;
  /** The users email */
   private java.lang.String email;
  /** When the user was created */
   private long createdDate;
  /** The users first name */
   private long lastLogInDate;
  /** If the user should receive emails */
   private boolean receiveEmails;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public User() {}

  /**
   * All-args constructor.
   * @param firstName The users first name
   * @param lastName The users last name
   * @param username The users username
   * @param email The users email
   * @param createdDate When the user was created
   * @param lastLogInDate The users first name
   * @param receiveEmails If the user should receive emails
   */
  public User(java.lang.String firstName, java.lang.String lastName, java.lang.String username, java.lang.String email, java.lang.Long createdDate, java.lang.Long lastLogInDate, java.lang.Boolean receiveEmails) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.username = username;
    this.email = email;
    this.createdDate = createdDate;
    this.lastLogInDate = lastLogInDate;
    this.receiveEmails = receiveEmails;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return firstName;
    case 1: return lastName;
    case 2: return username;
    case 3: return email;
    case 4: return createdDate;
    case 5: return lastLogInDate;
    case 6: return receiveEmails;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: firstName = (java.lang.String)value$; break;
    case 1: lastName = (java.lang.String)value$; break;
    case 2: username = (java.lang.String)value$; break;
    case 3: email = (java.lang.String)value$; break;
    case 4: createdDate = (java.lang.Long)value$; break;
    case 5: lastLogInDate = (java.lang.Long)value$; break;
    case 6: receiveEmails = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'firstName' field.
   * @return The users first name
   */
  public java.lang.String getFirstName() {
    return firstName;
  }


  /**
   * Gets the value of the 'lastName' field.
   * @return The users last name
   */
  public java.lang.String getLastName() {
    return lastName;
  }


  /**
   * Gets the value of the 'username' field.
   * @return The users username
   */
  public java.lang.String getUsername() {
    return username;
  }


  /**
   * Gets the value of the 'email' field.
   * @return The users email
   */
  public java.lang.String getEmail() {
    return email;
  }


  /**
   * Gets the value of the 'createdDate' field.
   * @return When the user was created
   */
  public java.lang.Long getCreatedDate() {
    return createdDate;
  }


  /**
   * Gets the value of the 'lastLogInDate' field.
   * @return The users first name
   */
  public java.lang.Long getLastLogInDate() {
    return lastLogInDate;
  }


  /**
   * Gets the value of the 'receiveEmails' field.
   * @return If the user should receive emails
   */
  public java.lang.Boolean getReceiveEmails() {
    return receiveEmails;
  }


  /**
   * Creates a new User RecordBuilder.
   * @return A new User RecordBuilder
   */
  public static com.paulhoang.User.Builder newBuilder() {
    return new com.paulhoang.User.Builder();
  }

  /**
   * Creates a new User RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new User RecordBuilder
   */
  public static com.paulhoang.User.Builder newBuilder(com.paulhoang.User.Builder other) {
    return new com.paulhoang.User.Builder(other);
  }

  /**
   * Creates a new User RecordBuilder by copying an existing User instance.
   * @param other The existing instance to copy.
   * @return A new User RecordBuilder
   */
  public static com.paulhoang.User.Builder newBuilder(com.paulhoang.User other) {
    return new com.paulhoang.User.Builder(other);
  }

  /**
   * RecordBuilder for User instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
    implements org.apache.avro.data.RecordBuilder<User> {

    /** The users first name */
    private java.lang.String firstName;
    /** The users last name */
    private java.lang.String lastName;
    /** The users username */
    private java.lang.String username;
    /** The users email */
    private java.lang.String email;
    /** When the user was created */
    private long createdDate;
    /** The users first name */
    private long lastLogInDate;
    /** If the user should receive emails */
    private boolean receiveEmails;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.paulhoang.User.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.firstName)) {
        this.firstName = data().deepCopy(fields()[0].schema(), other.firstName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastName)) {
        this.lastName = data().deepCopy(fields()[1].schema(), other.lastName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.username)) {
        this.username = data().deepCopy(fields()[2].schema(), other.username);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.createdDate)) {
        this.createdDate = data().deepCopy(fields()[4].schema(), other.createdDate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lastLogInDate)) {
        this.lastLogInDate = data().deepCopy(fields()[5].schema(), other.lastLogInDate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.receiveEmails)) {
        this.receiveEmails = data().deepCopy(fields()[6].schema(), other.receiveEmails);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing User instance
     * @param other The existing instance to copy.
     */
    private Builder(com.paulhoang.User other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.firstName)) {
        this.firstName = data().deepCopy(fields()[0].schema(), other.firstName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastName)) {
        this.lastName = data().deepCopy(fields()[1].schema(), other.lastName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.username)) {
        this.username = data().deepCopy(fields()[2].schema(), other.username);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.createdDate)) {
        this.createdDate = data().deepCopy(fields()[4].schema(), other.createdDate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lastLogInDate)) {
        this.lastLogInDate = data().deepCopy(fields()[5].schema(), other.lastLogInDate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.receiveEmails)) {
        this.receiveEmails = data().deepCopy(fields()[6].schema(), other.receiveEmails);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'firstName' field.
      * The users first name
      * @return The value.
      */
    public java.lang.String getFirstName() {
      return firstName;
    }

    /**
      * Sets the value of the 'firstName' field.
      * The users first name
      * @param value The value of 'firstName'.
      * @return This builder.
      */
    public com.paulhoang.User.Builder setFirstName(java.lang.String value) {
      validate(fields()[0], value);
      this.firstName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'firstName' field has been set.
      * The users first name
      * @return True if the 'firstName' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'firstName' field.
      * The users first name
      * @return This builder.
      */
    public com.paulhoang.User.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastName' field.
      * The users last name
      * @return The value.
      */
    public java.lang.String getLastName() {
      return lastName;
    }

    /**
      * Sets the value of the 'lastName' field.
      * The users last name
      * @param value The value of 'lastName'.
      * @return This builder.
      */
    public com.paulhoang.User.Builder setLastName(java.lang.String value) {
      validate(fields()[1], value);
      this.lastName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lastName' field has been set.
      * The users last name
      * @return True if the 'lastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lastName' field.
      * The users last name
      * @return This builder.
      */
    public com.paulhoang.User.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'username' field.
      * The users username
      * @return The value.
      */
    public java.lang.String getUsername() {
      return username;
    }

    /**
      * Sets the value of the 'username' field.
      * The users username
      * @param value The value of 'username'.
      * @return This builder.
      */
    public com.paulhoang.User.Builder setUsername(java.lang.String value) {
      validate(fields()[2], value);
      this.username = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'username' field has been set.
      * The users username
      * @return True if the 'username' field has been set, false otherwise.
      */
    public boolean hasUsername() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'username' field.
      * The users username
      * @return This builder.
      */
    public com.paulhoang.User.Builder clearUsername() {
      username = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * The users email
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }

    /**
      * Sets the value of the 'email' field.
      * The users email
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.paulhoang.User.Builder setEmail(java.lang.String value) {
      validate(fields()[3], value);
      this.email = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * The users email
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'email' field.
      * The users email
      * @return This builder.
      */
    public com.paulhoang.User.Builder clearEmail() {
      email = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdDate' field.
      * When the user was created
      * @return The value.
      */
    public java.lang.Long getCreatedDate() {
      return createdDate;
    }

    /**
      * Sets the value of the 'createdDate' field.
      * When the user was created
      * @param value The value of 'createdDate'.
      * @return This builder.
      */
    public com.paulhoang.User.Builder setCreatedDate(long value) {
      validate(fields()[4], value);
      this.createdDate = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'createdDate' field has been set.
      * When the user was created
      * @return True if the 'createdDate' field has been set, false otherwise.
      */
    public boolean hasCreatedDate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'createdDate' field.
      * When the user was created
      * @return This builder.
      */
    public com.paulhoang.User.Builder clearCreatedDate() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastLogInDate' field.
      * The users first name
      * @return The value.
      */
    public java.lang.Long getLastLogInDate() {
      return lastLogInDate;
    }

    /**
      * Sets the value of the 'lastLogInDate' field.
      * The users first name
      * @param value The value of 'lastLogInDate'.
      * @return This builder.
      */
    public com.paulhoang.User.Builder setLastLogInDate(long value) {
      validate(fields()[5], value);
      this.lastLogInDate = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'lastLogInDate' field has been set.
      * The users first name
      * @return True if the 'lastLogInDate' field has been set, false otherwise.
      */
    public boolean hasLastLogInDate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'lastLogInDate' field.
      * The users first name
      * @return This builder.
      */
    public com.paulhoang.User.Builder clearLastLogInDate() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'receiveEmails' field.
      * If the user should receive emails
      * @return The value.
      */
    public java.lang.Boolean getReceiveEmails() {
      return receiveEmails;
    }

    /**
      * Sets the value of the 'receiveEmails' field.
      * If the user should receive emails
      * @param value The value of 'receiveEmails'.
      * @return This builder.
      */
    public com.paulhoang.User.Builder setReceiveEmails(boolean value) {
      validate(fields()[6], value);
      this.receiveEmails = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'receiveEmails' field has been set.
      * If the user should receive emails
      * @return True if the 'receiveEmails' field has been set, false otherwise.
      */
    public boolean hasReceiveEmails() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'receiveEmails' field.
      * If the user should receive emails
      * @return This builder.
      */
    public com.paulhoang.User.Builder clearReceiveEmails() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public User build() {
      try {
        User record = new User();
        record.firstName = fieldSetFlags()[0] ? this.firstName : (java.lang.String) defaultValue(fields()[0]);
        record.lastName = fieldSetFlags()[1] ? this.lastName : (java.lang.String) defaultValue(fields()[1]);
        record.username = fieldSetFlags()[2] ? this.username : (java.lang.String) defaultValue(fields()[2]);
        record.email = fieldSetFlags()[3] ? this.email : (java.lang.String) defaultValue(fields()[3]);
        record.createdDate = fieldSetFlags()[4] ? this.createdDate : (java.lang.Long) defaultValue(fields()[4]);
        record.lastLogInDate = fieldSetFlags()[5] ? this.lastLogInDate : (java.lang.Long) defaultValue(fields()[5]);
        record.receiveEmails = fieldSetFlags()[6] ? this.receiveEmails : (java.lang.Boolean) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<User>
    WRITER$ = (org.apache.avro.io.DatumWriter<User>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<User>
    READER$ = (org.apache.avro.io.DatumReader<User>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
