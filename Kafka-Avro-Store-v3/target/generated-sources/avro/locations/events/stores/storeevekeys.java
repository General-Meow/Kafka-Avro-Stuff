/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package locations.events.stores;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class storeevekeys extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4564334904471819615L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"storeevekeys\",\"namespace\":\"locations.events.stores\",\"fields\":[{\"name\":\"place_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"subject\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"brand\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"extra\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<storeevekeys> ENCODER =
      new BinaryMessageEncoder<storeevekeys>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<storeevekeys> DECODER =
      new BinaryMessageDecoder<storeevekeys>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<storeevekeys> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<storeevekeys> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<storeevekeys> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<storeevekeys>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this storeevekeys to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a storeevekeys from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a storeevekeys instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static storeevekeys fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String place_id;
  private java.lang.String subject;
  private java.lang.String brand;
  private java.lang.String extra;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public storeevekeys() {}

  /**
   * All-args constructor.
   * @param place_id The new value for place_id
   * @param subject The new value for subject
   * @param brand The new value for brand
   * @param extra The new value for extra
   */
  public storeevekeys(java.lang.String place_id, java.lang.String subject, java.lang.String brand, java.lang.String extra) {
    this.place_id = place_id;
    this.subject = subject;
    this.brand = brand;
    this.extra = extra;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return place_id;
    case 1: return subject;
    case 2: return brand;
    case 3: return extra;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: place_id = value$ != null ? value$.toString() : null; break;
    case 1: subject = value$ != null ? value$.toString() : null; break;
    case 2: brand = value$ != null ? value$.toString() : null; break;
    case 3: extra = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'place_id' field.
   * @return The value of the 'place_id' field.
   */
  public java.lang.String getPlaceId() {
    return place_id;
  }



  /**
   * Gets the value of the 'subject' field.
   * @return The value of the 'subject' field.
   */
  public java.lang.String getSubject() {
    return subject;
  }



  /**
   * Gets the value of the 'brand' field.
   * @return The value of the 'brand' field.
   */
  public java.lang.String getBrand() {
    return brand;
  }



  /**
   * Gets the value of the 'extra' field.
   * @return The value of the 'extra' field.
   */
  public java.lang.String getExtra() {
    return extra;
  }



  /**
   * Creates a new storeevekeys RecordBuilder.
   * @return A new storeevekeys RecordBuilder
   */
  public static locations.events.stores.storeevekeys.Builder newBuilder() {
    return new locations.events.stores.storeevekeys.Builder();
  }

  /**
   * Creates a new storeevekeys RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new storeevekeys RecordBuilder
   */
  public static locations.events.stores.storeevekeys.Builder newBuilder(locations.events.stores.storeevekeys.Builder other) {
    if (other == null) {
      return new locations.events.stores.storeevekeys.Builder();
    } else {
      return new locations.events.stores.storeevekeys.Builder(other);
    }
  }

  /**
   * Creates a new storeevekeys RecordBuilder by copying an existing storeevekeys instance.
   * @param other The existing instance to copy.
   * @return A new storeevekeys RecordBuilder
   */
  public static locations.events.stores.storeevekeys.Builder newBuilder(locations.events.stores.storeevekeys other) {
    if (other == null) {
      return new locations.events.stores.storeevekeys.Builder();
    } else {
      return new locations.events.stores.storeevekeys.Builder(other);
    }
  }

  /**
   * RecordBuilder for storeevekeys instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<storeevekeys>
    implements org.apache.avro.data.RecordBuilder<storeevekeys> {

    private java.lang.String place_id;
    private java.lang.String subject;
    private java.lang.String brand;
    private java.lang.String extra;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(locations.events.stores.storeevekeys.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.place_id)) {
        this.place_id = data().deepCopy(fields()[0].schema(), other.place_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.subject)) {
        this.subject = data().deepCopy(fields()[1].schema(), other.subject);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.brand)) {
        this.brand = data().deepCopy(fields()[2].schema(), other.brand);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.extra)) {
        this.extra = data().deepCopy(fields()[3].schema(), other.extra);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing storeevekeys instance
     * @param other The existing instance to copy.
     */
    private Builder(locations.events.stores.storeevekeys other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.place_id)) {
        this.place_id = data().deepCopy(fields()[0].schema(), other.place_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subject)) {
        this.subject = data().deepCopy(fields()[1].schema(), other.subject);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.brand)) {
        this.brand = data().deepCopy(fields()[2].schema(), other.brand);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.extra)) {
        this.extra = data().deepCopy(fields()[3].schema(), other.extra);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'place_id' field.
      * @return The value.
      */
    public java.lang.String getPlaceId() {
      return place_id;
    }


    /**
      * Sets the value of the 'place_id' field.
      * @param value The value of 'place_id'.
      * @return This builder.
      */
    public locations.events.stores.storeevekeys.Builder setPlaceId(java.lang.String value) {
      validate(fields()[0], value);
      this.place_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'place_id' field has been set.
      * @return True if the 'place_id' field has been set, false otherwise.
      */
    public boolean hasPlaceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'place_id' field.
      * @return This builder.
      */
    public locations.events.stores.storeevekeys.Builder clearPlaceId() {
      place_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'subject' field.
      * @return The value.
      */
    public java.lang.String getSubject() {
      return subject;
    }


    /**
      * Sets the value of the 'subject' field.
      * @param value The value of 'subject'.
      * @return This builder.
      */
    public locations.events.stores.storeevekeys.Builder setSubject(java.lang.String value) {
      validate(fields()[1], value);
      this.subject = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'subject' field has been set.
      * @return True if the 'subject' field has been set, false otherwise.
      */
    public boolean hasSubject() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'subject' field.
      * @return This builder.
      */
    public locations.events.stores.storeevekeys.Builder clearSubject() {
      subject = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'brand' field.
      * @return The value.
      */
    public java.lang.String getBrand() {
      return brand;
    }


    /**
      * Sets the value of the 'brand' field.
      * @param value The value of 'brand'.
      * @return This builder.
      */
    public locations.events.stores.storeevekeys.Builder setBrand(java.lang.String value) {
      validate(fields()[2], value);
      this.brand = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'brand' field has been set.
      * @return True if the 'brand' field has been set, false otherwise.
      */
    public boolean hasBrand() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'brand' field.
      * @return This builder.
      */
    public locations.events.stores.storeevekeys.Builder clearBrand() {
      brand = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'extra' field.
      * @return The value.
      */
    public java.lang.String getExtra() {
      return extra;
    }


    /**
      * Sets the value of the 'extra' field.
      * @param value The value of 'extra'.
      * @return This builder.
      */
    public locations.events.stores.storeevekeys.Builder setExtra(java.lang.String value) {
      validate(fields()[3], value);
      this.extra = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'extra' field has been set.
      * @return True if the 'extra' field has been set, false otherwise.
      */
    public boolean hasExtra() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'extra' field.
      * @return This builder.
      */
    public locations.events.stores.storeevekeys.Builder clearExtra() {
      extra = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public storeevekeys build() {
      try {
        storeevekeys record = new storeevekeys();
        record.place_id = fieldSetFlags()[0] ? this.place_id : (java.lang.String) defaultValue(fields()[0]);
        record.subject = fieldSetFlags()[1] ? this.subject : (java.lang.String) defaultValue(fields()[1]);
        record.brand = fieldSetFlags()[2] ? this.brand : (java.lang.String) defaultValue(fields()[2]);
        record.extra = fieldSetFlags()[3] ? this.extra : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<storeevekeys>
    WRITER$ = (org.apache.avro.io.DatumWriter<storeevekeys>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<storeevekeys>
    READER$ = (org.apache.avro.io.DatumReader<storeevekeys>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.place_id);

    out.writeString(this.subject);

    if (this.brand == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.brand);
    }

    if (this.extra == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.extra);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.place_id = in.readString();

      this.subject = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.brand = null;
      } else {
        this.brand = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.extra = null;
      } else {
        this.extra = in.readString();
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.place_id = in.readString();
          break;

        case 1:
          this.subject = in.readString();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.brand = null;
          } else {
            this.brand = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.extra = null;
          } else {
            this.extra = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










