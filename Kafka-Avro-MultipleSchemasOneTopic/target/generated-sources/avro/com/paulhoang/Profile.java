/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.paulhoang;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** The first version of a Profile schema */
@org.apache.avro.specific.AvroGenerated
public class Profile extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2883258882981954225L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Profile\",\"namespace\":\"com.paulhoang\",\"doc\":\"The first version of a Profile schema\",\"fields\":[{\"name\":\"imageUrl\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The users profile image\"},{\"name\":\"jobTitle\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The users job title\"},{\"name\":\"department\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The users working department\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Profile> ENCODER =
      new BinaryMessageEncoder<Profile>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Profile> DECODER =
      new BinaryMessageDecoder<Profile>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Profile> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Profile> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Profile>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Profile to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Profile from a ByteBuffer. */
  public static Profile fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The users profile image */
   private java.lang.String imageUrl;
  /** The users job title */
   private java.lang.String jobTitle;
  /** The users working department */
   private java.lang.String department;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Profile() {}

  /**
   * All-args constructor.
   * @param imageUrl The users profile image
   * @param jobTitle The users job title
   * @param department The users working department
   */
  public Profile(java.lang.String imageUrl, java.lang.String jobTitle, java.lang.String department) {
    this.imageUrl = imageUrl;
    this.jobTitle = jobTitle;
    this.department = department;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return imageUrl;
    case 1: return jobTitle;
    case 2: return department;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: imageUrl = (java.lang.String)value$; break;
    case 1: jobTitle = (java.lang.String)value$; break;
    case 2: department = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'imageUrl' field.
   * @return The users profile image
   */
  public java.lang.String getImageUrl() {
    return imageUrl;
  }


  /**
   * Gets the value of the 'jobTitle' field.
   * @return The users job title
   */
  public java.lang.String getJobTitle() {
    return jobTitle;
  }


  /**
   * Gets the value of the 'department' field.
   * @return The users working department
   */
  public java.lang.String getDepartment() {
    return department;
  }


  /**
   * Creates a new Profile RecordBuilder.
   * @return A new Profile RecordBuilder
   */
  public static com.paulhoang.Profile.Builder newBuilder() {
    return new com.paulhoang.Profile.Builder();
  }

  /**
   * Creates a new Profile RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Profile RecordBuilder
   */
  public static com.paulhoang.Profile.Builder newBuilder(com.paulhoang.Profile.Builder other) {
    return new com.paulhoang.Profile.Builder(other);
  }

  /**
   * Creates a new Profile RecordBuilder by copying an existing Profile instance.
   * @param other The existing instance to copy.
   * @return A new Profile RecordBuilder
   */
  public static com.paulhoang.Profile.Builder newBuilder(com.paulhoang.Profile other) {
    return new com.paulhoang.Profile.Builder(other);
  }

  /**
   * RecordBuilder for Profile instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Profile>
    implements org.apache.avro.data.RecordBuilder<Profile> {

    /** The users profile image */
    private java.lang.String imageUrl;
    /** The users job title */
    private java.lang.String jobTitle;
    /** The users working department */
    private java.lang.String department;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.paulhoang.Profile.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.imageUrl)) {
        this.imageUrl = data().deepCopy(fields()[0].schema(), other.imageUrl);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.jobTitle)) {
        this.jobTitle = data().deepCopy(fields()[1].schema(), other.jobTitle);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.department)) {
        this.department = data().deepCopy(fields()[2].schema(), other.department);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Profile instance
     * @param other The existing instance to copy.
     */
    private Builder(com.paulhoang.Profile other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.imageUrl)) {
        this.imageUrl = data().deepCopy(fields()[0].schema(), other.imageUrl);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.jobTitle)) {
        this.jobTitle = data().deepCopy(fields()[1].schema(), other.jobTitle);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.department)) {
        this.department = data().deepCopy(fields()[2].schema(), other.department);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'imageUrl' field.
      * The users profile image
      * @return The value.
      */
    public java.lang.String getImageUrl() {
      return imageUrl;
    }

    /**
      * Sets the value of the 'imageUrl' field.
      * The users profile image
      * @param value The value of 'imageUrl'.
      * @return This builder.
      */
    public com.paulhoang.Profile.Builder setImageUrl(java.lang.String value) {
      validate(fields()[0], value);
      this.imageUrl = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'imageUrl' field has been set.
      * The users profile image
      * @return True if the 'imageUrl' field has been set, false otherwise.
      */
    public boolean hasImageUrl() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'imageUrl' field.
      * The users profile image
      * @return This builder.
      */
    public com.paulhoang.Profile.Builder clearImageUrl() {
      imageUrl = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'jobTitle' field.
      * The users job title
      * @return The value.
      */
    public java.lang.String getJobTitle() {
      return jobTitle;
    }

    /**
      * Sets the value of the 'jobTitle' field.
      * The users job title
      * @param value The value of 'jobTitle'.
      * @return This builder.
      */
    public com.paulhoang.Profile.Builder setJobTitle(java.lang.String value) {
      validate(fields()[1], value);
      this.jobTitle = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'jobTitle' field has been set.
      * The users job title
      * @return True if the 'jobTitle' field has been set, false otherwise.
      */
    public boolean hasJobTitle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'jobTitle' field.
      * The users job title
      * @return This builder.
      */
    public com.paulhoang.Profile.Builder clearJobTitle() {
      jobTitle = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'department' field.
      * The users working department
      * @return The value.
      */
    public java.lang.String getDepartment() {
      return department;
    }

    /**
      * Sets the value of the 'department' field.
      * The users working department
      * @param value The value of 'department'.
      * @return This builder.
      */
    public com.paulhoang.Profile.Builder setDepartment(java.lang.String value) {
      validate(fields()[2], value);
      this.department = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'department' field has been set.
      * The users working department
      * @return True if the 'department' field has been set, false otherwise.
      */
    public boolean hasDepartment() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'department' field.
      * The users working department
      * @return This builder.
      */
    public com.paulhoang.Profile.Builder clearDepartment() {
      department = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Profile build() {
      try {
        Profile record = new Profile();
        record.imageUrl = fieldSetFlags()[0] ? this.imageUrl : (java.lang.String) defaultValue(fields()[0]);
        record.jobTitle = fieldSetFlags()[1] ? this.jobTitle : (java.lang.String) defaultValue(fields()[1]);
        record.department = fieldSetFlags()[2] ? this.department : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Profile>
    WRITER$ = (org.apache.avro.io.DatumWriter<Profile>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Profile>
    READER$ = (org.apache.avro.io.DatumReader<Profile>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
